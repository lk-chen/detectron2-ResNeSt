# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
import math
import fvcore.nn.weight_init as weight_init
import torch.nn.functional as F
from torch import nn
import torch

from detectron2.layers import Conv2d, ShapeSpec, get_norm

from .backbone import Backbone
from .build import BACKBONE_REGISTRY
from .resnet import build_resnet_backbone

__all__ = ["build_resnet_nasfpn_backbone", "build_retinanet_resnet_nasfpn_backbone", "NASFPN"]


class NASFPN(Backbone):
    """
    This module implements Feature Pyramid Network.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
        self, bottom_up, in_features, out_channels, norm="", top_block=None, fuse_type="sum"
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(NASFPN, self).__init__()
        assert isinstance(bottom_up, Backbone)
        assert top_block is not None, "must pass top_block, otherwise P6 doesn't exist"

        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up.output_shape()

        in_strides = [input_shapes[f].stride for f in in_features]
        in_channels = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(in_strides)
        lateral_convs = []

        use_bias = norm == ""
        for idx, in_channels_ in enumerate(in_channels):
            lateral_norm = get_norm(norm, out_channels)
            output_norm = get_norm(norm, out_channels)

            lateral_conv = Conv2d(
                in_channels_, out_channels, kernel_size=1, bias=use_bias, norm=lateral_norm
            )
            weight_init.c2_xavier_fill(lateral_conv)
            stage = int(math.log2(in_strides[idx]))
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)

            lateral_convs.append(lateral_conv)
        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.lateral_conv_p6 = Conv2d(
            in_channels[-1], out_channels, kernel_size=1, bias=use_bias, norm=get_norm(norm, out_channels))
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up = bottom_up
        # self.RCB = RCB(in_channels, out_channels, norm)
        self.rcbs = {
            k: RCB(out_channels, out_channels, 'BN') for k in ['GP_P5_P3', 'SUM1', 'SUM2', 'SUM3', 'SUM4', 'SUM5', 'SUM4_RCB_GP1']
        }
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in in_strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels for k in self._out_features}
        self._size_divisibility = in_strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        # print("Get into NASFPN forward")

        # Reverse feature maps into top-down order (from low to high resolution)
        bottom_up_features = self.bottom_up(x)

        # following features have different num_channels, need to convert
        lateral_features_dict = {
            f: self.lateral_convs[idx](bottom_up_features[f]) for idx, f in enumerate(self.in_features[::-1])
        }

        GP_P5_P3 = gp(lateral_features_dict["res5"], lateral_features_dict["res3"])
        GP_P5_P3_RCB = self.rcbs['GP_P5_P3'](GP_P5_P3)
        SUM1 = sum_fm(GP_P5_P3_RCB, lateral_features_dict["res3"])
        SUM1_RCB = self.rcbs['SUM1'](SUM1)
        SUM2 = sum_fm(SUM1_RCB, lateral_features_dict["res2"])
        SUM2_RCB = self.rcbs['SUM2'](SUM2)
        SUM3 = sum_fm(SUM2_RCB, SUM1_RCB)
        SUM3_RCB = self.rcbs['SUM3'](SUM3)
        SUM3_RCB_GP = gp(SUM2_RCB, SUM3_RCB)
        SUM4 = sum_fm(SUM3_RCB_GP, lateral_features_dict["res4"])
        SUM4_RCB = self.rcbs['SUM4'](SUM4)
        SUM4_RCB_GP = gp(SUM1_RCB, SUM4_RCB)

        top_block_in_feature = bottom_up_features['res5']
        # In original implmentation, this uses results["res5"], when we implement NAS-FPN,
        # we don't have result, so use bottom_up_features["res5"]
        P6 = (self.top_block(top_block_in_feature))
        P6 = self.lateral_conv_p6(P6)
        SUM5 = sum_fm(SUM4_RCB_GP, P6)
        SUM5_RCB = self.rcbs['SUM5'](SUM5)
        h, w = bottom_up_features["res5"].shape[1], bottom_up_features["res5"].shape[2]
        SUM5_RCB_resize = F.interpolate(SUM5_RCB, size=(h, w), mode='bilinear')
        SUM4_RCB_GP1 = gp(SUM4_RCB, SUM5_RCB_resize)
        SUM4_RCB_GP1_RCB = self.rcbs['SUM4_RCB_GP1'](SUM4_RCB_GP1)

        res = {"p2": SUM2_RCB, "p3": SUM3_RCB, "p4": SUM4_RCB,
               "p5": SUM4_RCB_GP1_RCB, "p6": SUM5_RCB}
        return res

    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }


def _assert_strides_are_log2_contiguous(strides):
    """
    Assert that each stride is 2x times its preceding stride, i.e. "contiguous in log2".
    """
    for i, stride in enumerate(strides[1:], 1):
        assert stride == 2 * strides[i - 1], "Strides {} {} are not log2 contiguous".format(
            stride, strides[i - 1]
        )


def gp(fm1, fm2):
    # fm.shape is like [batch_size, c, h, w]
    global_ctx = torch.mean(fm1, (2, 3), keepdim=True)
    global_ctx = torch.sigmoid(global_ctx)
    h, w = fm2.shape[2], fm2.shape[3]
    op2 = F.interpolate(fm1, (h, w), mode='bilinear')
    op1 = (global_ctx * fm2)
    output = op1 + op2
    return output


def sum_fm(fm1, fm2):
    h, w = fm2.shape[2], fm2.shape[3]
    output = fm2 + F.interpolate(fm1, (h, w), mode='bilinear')
    return output


class RCB(nn.Module):
    """
    This module used to implement rcb in NAS-FPN.
    """

    def __init__(self, in_channels, out_channels, norm):
        super().__init__()
        self.C = Conv2d(in_channels, out_channels, 3, bias=False,
                        norm=get_norm(norm, out_channels)).cuda()
        weight_init.c2_xavier_fill(self.C)
        print("RCB created")

    def forward(self, x):
        print("RCB forward called")
        return self.C(F.relu(x))


class LastLevelMaxPool(nn.Module):
    """
    This module is used in the original FPN to generate a downsampled
    P6 feature from P5.
    """

    def __init__(self):
        super().__init__()
        self.num_levels = 1
        self.in_feature = "p5"

    def forward(self, x):
        return F.max_pool2d(x, kernel_size=1, stride=2, padding=0)


class LastLevelP6P7(nn.Module):
    """
    This module is used in RetinaNet to generate extra layers, P6 and P7 from
    C5 feature.
    """

    def __init__(self, in_channels, out_channels, in_feature="res5"):
        super().__init__()
        self.num_levels = 2
        self.in_feature = in_feature
        self.p6 = nn.Conv2d(in_channels, out_channels, 3, 2, 1)
        self.p7 = nn.Conv2d(out_channels, out_channels, 3, 2, 1)
        for module in [self.p6, self.p7]:
            weight_init.c2_xavier_fill(module)

    def forward(self, c5):
        p6 = self.p6(c5)
        # p7 = self.p7(F.relu(p6))
        return p6


@BACKBONE_REGISTRY.register()
def build_resnet_nasfpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.NASFPN.IN_FEATURES
    out_channels = cfg.MODEL.NASFPN.OUT_CHANNELS
    backbone = NASFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.NASFPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.NASFPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_retinanet_resnet_nasfpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.NASFPN.IN_FEATURES
    out_channels = cfg.MODEL.NASFPN.OUT_CHANNELS
    in_channels_p6p7 = bottom_up.output_shape()["res5"].channels
    backbone = NASFPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.NASFPN.NORM,
        top_block=LastLevelP6P7(in_channels_p6p7, out_channels),
        fuse_type=cfg.MODEL.NASFPN.FUSE_TYPE,
    )
    return backbone
